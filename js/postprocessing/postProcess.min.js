THREE.ConvolutionShader={defines:{"KERNEL_SIZE_FLOAT":"25.0","KERNEL_SIZE_INT":"25",},uniforms:{"tDiffuse":{type:"t",value:null},"uImageIncrement":{type:"v2",value:new THREE.Vector2(0.001953125,0.0)},"cKernel":{type:"fv1",value:[]}},vertexShader:["uniform vec2 uImageIncrement;","varying vec2 vUv;","void main() {","vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float cKernel[ KERNEL_SIZE_INT ];","uniform sampler2D tDiffuse;","uniform vec2 uImageIncrement;","varying vec2 vUv;","void main() {","vec2 imageCoord = vUv;","vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );","for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {","sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];","imageCoord += uImageIncrement;","}","gl_FragColor = sum;","}"].join("\n"),buildKernel:function(sigma){function gauss(x,sigma){return Math.exp(-(x*x)/(2.0*sigma*sigma));}var i,values,sum,halfWidth,kMaxKernelSize=25,kernelSize=2*Math.ceil(sigma*3.0)+1;if(kernelSize>kMaxKernelSize)kernelSize=kMaxKernelSize;halfWidth=(kernelSize-1)*0.5;values=new Array(kernelSize);sum=0.0;for(i=0;i<kernelSize;++i){values[i]=gauss(i-halfWidth,sigma);sum+=values[i];}for(i=0;i<kernelSize;++i)values[i]/=sum;return values;}};THREE.CopyShader={uniforms:{"tDiffuse":{type:"t",value:null},"opacity":{type:"f",value:1.0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")};THREE.FilmShader={uniforms:{"tDiffuse":{type:"t",value:null},"time":{type:"f",value:0.0},"nIntensity":{type:"f",value:0.5},"sIntensity":{type:"f",value:0.05},"sCount":{type:"f",value:4096},"grayscale":{type:"i",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float time;","uniform bool grayscale;","uniform float nIntensity;","uniform float sIntensity;","uniform float sCount;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 cTextureScreen = texture2D( tDiffuse, vUv );","float x = vUv.x * vUv.y * time *  1000.0;","x = mod( x, 13.0 ) * mod( x, 123.0 );","float dx = mod( x, 0.01 );","vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );","vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );","cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;","cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );","if( grayscale ) {","cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );","}","gl_FragColor =  vec4( cResult, cTextureScreen.a );","}"].join("\n")};THREE.EffectComposer=function(renderer,renderTarget){this.renderer=renderer;if(renderTarget===undefined){var width=window.innerWidth||1;var height=window.innerHeight||1;var parameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:false};renderTarget=new THREE.WebGLRenderTarget(width,height,parameters);}this.renderTarget1=renderTarget;this.renderTarget2=renderTarget.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];if(THREE.CopyShader===undefined)console.error("THREE.EffectComposer relies on THREE.CopyShader");this.copyPass=new THREE.ShaderPass(THREE.CopyShader);};THREE.EffectComposer.prototype={swapBuffers:function(){var tmp=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=tmp;},addPass:function(pass){this.passes.push(pass);},insertPass:function(pass,index){this.passes.splice(index,0,pass);},render:function(delta){this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;var maskActive=false;var pass,i,il=this.passes.length;for(i=0;i<il;i++){pass=this.passes[i];if(!pass.enabled)continue;pass.render(this.renderer,this.writeBuffer,this.readBuffer,delta,maskActive);if(pass.needsSwap){if(maskActive){var context=this.renderer.context;context.stencilFunc(context.NOTEQUAL,1,0xffffffff);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,delta);context.stencilFunc(context.EQUAL,1,0xffffffff);}this.swapBuffers();}if(pass instanceof THREE.MaskPass){maskActive=true;}else if(pass instanceof THREE.ClearMaskPass){maskActive=false;}}},reset:function(renderTarget){if(renderTarget===undefined){renderTarget=this.renderTarget1.clone();renderTarget.width=window.innerWidth;renderTarget.height=window.innerHeight;}this.renderTarget1=renderTarget;this.renderTarget2=renderTarget.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;},setSize:function(width,height){var renderTarget=this.renderTarget1.clone();renderTarget.width=width;renderTarget.height=height;this.reset(renderTarget);}};THREE.ShaderPass=function(shader,textureID){this.textureID=(textureID!==undefined)?textureID:"tDiffuse";this.uniforms=THREE.UniformsUtils.clone(shader.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader});this.renderToScreen=false;this.enabled=true;this.needsSwap=true;this.clear=false;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene();this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null);this.scene.add(this.quad);};THREE.ShaderPass.prototype={render:function(renderer,writeBuffer,readBuffer,delta){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=readBuffer;}this.quad.material=this.material;if(this.renderToScreen){renderer.render(this.scene,this.camera);}else{renderer.render(this.scene,this.camera,writeBuffer,this.clear);}}};THREE.MaskPass=function(scene,camera){this.scene=scene;this.camera=camera;this.enabled=true;this.clear=true;this.needsSwap=false;this.inverse=false;};THREE.MaskPass.prototype={render:function(renderer,writeBuffer,readBuffer,delta){var context=renderer.context;context.colorMask(false,false,false,false);context.depthMask(false);var writeValue,clearValue;if(this.inverse){writeValue=0;clearValue=1;}else{writeValue=1;clearValue=0;}context.enable(context.STENCIL_TEST);context.stencilOp(context.REPLACE,context.REPLACE,context.REPLACE);context.stencilFunc(context.ALWAYS,writeValue,0xffffffff);context.clearStencil(clearValue);renderer.render(this.scene,this.camera,readBuffer,this.clear);renderer.render(this.scene,this.camera,writeBuffer,this.clear);context.colorMask(true,true,true,true);context.depthMask(true);context.stencilFunc(context.EQUAL,1,0xffffffff);context.stencilOp(context.KEEP,context.KEEP,context.KEEP);}};THREE.ClearMaskPass=function(){this.enabled=true;};THREE.ClearMaskPass.prototype={render:function(renderer,writeBuffer,readBuffer,delta){var context=renderer.context;context.disable(context.STENCIL_TEST);}};THREE.RenderPass=function(scene,camera,overrideMaterial,clearColor,clearAlpha){this.scene=scene;this.camera=camera;this.overrideMaterial=overrideMaterial;this.clearColor=clearColor;this.clearAlpha=(clearAlpha!==undefined)?clearAlpha:1;this.oldClearColor=new THREE.Color();this.oldClearAlpha=1;this.enabled=true;this.clear=true;this.needsSwap=false;};THREE.RenderPass.prototype={render:function(renderer,writeBuffer,readBuffer,delta){this.scene.overrideMaterial=this.overrideMaterial;if(this.clearColor){this.oldClearColor.copy(renderer.getClearColor());this.oldClearAlpha=renderer.getClearAlpha();renderer.setClearColor(this.clearColor,this.clearAlpha);}renderer.render(this.scene,this.camera,readBuffer,this.clear);if(this.clearColor){renderer.setClearColor(this.oldClearColor,this.oldClearAlpha);}this.scene.overrideMaterial=null;}};THREE.BloomPass=function(strength,kernelSize,sigma,resolution){strength=(strength!==undefined)?strength:1;kernelSize=(kernelSize!==undefined)?kernelSize:25;sigma=(sigma!==undefined)?sigma:4.0;resolution=(resolution!==undefined)?resolution:256;var pars={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat};this.renderTargetX=new THREE.WebGLRenderTarget(resolution,resolution,pars);this.renderTargetY=new THREE.WebGLRenderTarget(resolution,resolution,pars);if(THREE.CopyShader===undefined)console.error("THREE.BloomPass relies on THREE.CopyShader");var copyShader=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(copyShader.uniforms);this.copyUniforms["opacity"].value=strength;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:copyShader.vertexShader,fragmentShader:copyShader.fragmentShader,blending:THREE.AdditiveBlending,transparent:true});if(THREE.ConvolutionShader===undefined)console.error("THREE.BloomPass relies on THREE.ConvolutionShader");var convolutionShader=THREE.ConvolutionShader;this.convolutionUniforms=THREE.UniformsUtils.clone(convolutionShader.uniforms);this.convolutionUniforms["uImageIncrement"].value=THREE.BloomPass.blurx;this.convolutionUniforms["cKernel"].value=THREE.ConvolutionShader.buildKernel(sigma);this.materialConvolution=new THREE.ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:convolutionShader.vertexShader,fragmentShader:convolutionShader.fragmentShader,defines:{"KERNEL_SIZE_FLOAT":kernelSize.toFixed(1),"KERNEL_SIZE_INT":kernelSize.toFixed(0)}});this.enabled=true;this.needsSwap=false;this.clear=false;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene();this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null);this.scene.add(this.quad);};THREE.BloomPass.prototype={render:function(renderer,writeBuffer,readBuffer,delta,maskActive){if(maskActive)renderer.context.disable(renderer.context.STENCIL_TEST);this.quad.material=this.materialConvolution;this.convolutionUniforms["tDiffuse"].value=readBuffer;this.convolutionUniforms["uImageIncrement"].value=THREE.BloomPass.blurX;renderer.render(this.scene,this.camera,this.renderTargetX,true);this.convolutionUniforms["tDiffuse"].value=this.renderTargetX;this.convolutionUniforms["uImageIncrement"].value=THREE.BloomPass.blurY;renderer.render(this.scene,this.camera,this.renderTargetY,true);this.quad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=this.renderTargetY;if(maskActive)renderer.context.enable(renderer.context.STENCIL_TEST);renderer.render(this.scene,this.camera,readBuffer,this.clear);}};THREE.BloomPass.blurX=new THREE.Vector2(0.001953125,0.0);THREE.BloomPass.blurY=new THREE.Vector2(0.0,0.001953125);THREE.FilmPass=function(noiseIntensity,scanlinesIntensity,scanlinesCount,grayscale){if(THREE.FilmShader===undefined)console.error("THREE.FilmPass relies on THREE.FilmShader");var shader=THREE.FilmShader;this.uniforms=THREE.UniformsUtils.clone(shader.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader});if(grayscale!==undefined)this.uniforms.grayscale.value=grayscale;if(noiseIntensity!==undefined)this.uniforms.nIntensity.value=noiseIntensity;if(scanlinesIntensity!==undefined)this.uniforms.sIntensity.value=scanlinesIntensity;if(scanlinesCount!==undefined)this.uniforms.sCount.value=scanlinesCount;this.enabled=true;this.renderToScreen=false;this.needsSwap=true;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene();this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null);this.scene.add(this.quad);};THREE.FilmPass.prototype={render:function(renderer,writeBuffer,readBuffer,delta){this.uniforms["tDiffuse"].value=readBuffer;this.uniforms["time"].value+=delta;this.quad.material=this.material;if(this.renderToScreen){renderer.render(this.scene,this.camera);}else{renderer.render(this.scene,this.camera,writeBuffer,false);}}};